<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" initialize="init_app()" height="600" width="800">
	    <mx:Script>
        <![CDATA[
        	import com.sunrisetelecom.avantron.SettingsObj;
        	import mx.collections.ArrayCollection;
            // Data includes URL to album cover.
             import mx.events.MenuEvent;
            import mx.controls.Alert;
            import mx.managers.PopUpManager;
            import com.sunrisetelecom.avantron.Protocol;
            import com.sunrisetelecom.utils.DialogEntryEvent;
            private var avantron:Protocol;
            private var connected:Boolean=false;
            private var settings:SettingsObj=null;
            private var host:String="10.0.1.216";
            private var port:String="3001";
            private var hmid:String="1";
            private var ymargin:Number=15;
            private var xmargin:Number=30;
	    private var image_buffer:Array=new Array();
            [Bindable] private var responses:ArrayCollection=new ArrayCollection();
            [Bindable] private var portList:ArrayCollection=new ArrayCollection();
            [Bindable] private var funcs:Array=[
               {label:"logout",data: 7},
               {label:"logon",data: 1},
               {label:"get server info",data: 2},{label:"new mode",data:3},
               {label:"get settings",data:4},{label:"set settings",data:5},
               {label:"Get Firmware",data:8}];
             [Bindable] private var menuBarXML:XMLList =
                <>
                    <menuitem id="connectMenu" label="Connect" >
                        <menuitem id="conn" label={"Connect"+"A"} data="Connect"/>
                        <menuitem id="disconn" label="Disconnect" data="Disconnect" enabled="false"/>
                    </menuitem>
                    <menuitem id="modeMenu" label="Mode" >
                        <menuitem id="samode" label="Spectrum Analyzer" data="SA" type="radio" groupName="modegrp" enabled="false"/>
                        <menuitem id="analogmode" label="Analog" data="Analog" type="radio" groupName="modegrp" toggled="true"  enabled="false"/>
                        <menuitem id="dcpmode" label="DCP" data="DCP" type="radio" groupName="modegrp" enabled="false"/>
                        <menuitem id="qammode" label="QAM" data="QAM" type="radio" groupName="modegrp" enabled="false"/>
                    </menuitem>
                    <menuitem id="settingsMenu" label="Settings" data="Get Settings" enabled="true">
                        <menuitem id="updateSettings" label="Update Settings" data="SA"  enabled="false"/>
                        <menuitem id="changeSettings" label="Change Settings" data="SA"  enabled="false"/>
                    </menuitem>
                </>;
		// Trace Functions
	          private function dbToPixel(img_hgt:Number, vscale:Number,db:Number):Number
		  {
		    var result:Number=0;
		    result=img_hgt+db*vscale
		    return result;
		  }
		  private function v_scale(db:Number):int
		  {
		    var display_height:Number=traceImage.height;
		    var draw_height:Number=display_height-ymargin;
		    return (display_height-db*draw_height/70);
		  }
		  private function h_scale(pos:Number):int
		  {
		    var display_width:Number=traceImage.width;
		    var draw_width:Number=display_width-2*xmargin;
		    return (xmargin+pos*draw_width/500);
		  }
		  private function display_trace():void
		  {
		    var i:int;
		    traceImage.graphics.clear();
		    traceImage.graphics.lineStyle(0,0x000080,1);
		    trace("IMAGE LEN:"+image_buffer.length);
		    if (image_buffer.length == 0)
		    {
		      return;
		    }
		    trace("Drawing IMAGE LEN:"+image_buffer.length);
		    var x:int=h_scale(i);
		    var y:int=v_scale(image_buffer[i]);
		    traceImage.graphics.moveTo(x,y);
		    for (i=0;i<500;i++)
		    {
		      x=h_scale(i);
		      y=v_scale(image_buffer[i]);
		      traceImage.graphics.lineTo(x,y);
		    }
		  }


            public function process_response(... args):void
            {
               var event:String=args[0];
               var response_type:String;
               if (args.length > 1)
               {
                  response_type=args[1];
               }	
               var obj:Object={};
               obj["event"]=event;
               if (args.length > 1)
               {
   	            obj["response_type"]=args[1]
   	            obj["data"]=args[2]
               }
               obj[data]="";
	       trace("Switch Event:"+event);
               switch (event)
               {
   	            case "connect":
   	               trace("connect");
   	               obj["response_type"]="connect event";
   	               obj["data"]=""
   	               break;
   	            case "getServerInfo":
   	               obj["data"]=args[2].toString();
   	               break;		
   	            case "getSettings":
   	               trace("connect");
   	               obj["data"]=args[2].toString();
   	               settings=args[2];
                       settingsGrid.dataProvider=settings.generateCollection();
                       Alert.show("MODE:"+settings.mode.toString());
		       if (settings.mode == "SA")
		       {
		         avantron.trigger(0);
		       }
		       setModeMenu(settings.mode);
   	               break;		
   	            case "setSettings":
   	            case "newMode":
		       avantron.trigger(1);
		       avantron.getSettings();
   	               break;		
                    case "listNodes":
		       buildNodeList(args);
		       break;
                    case "availRPTPS":
		       Alert.show("Got avail RPTPS:" + args[2].length);
		       break;
                    case "logon":
		       avantron.listNodes(1);
		       break;
                    case "selectRPTP":
		       Alert.show("Got RPTP called");
		       avantron.getRPTP();
		       break;
		    case "trigger":
		      trace("TRIGGER RESPONSE");
		      image_buffer=args[2].image;
		      display_trace();
		      break;
                    default:
   		            trace("Do not Recognize "+event+ "but will attempt to display anyway");
   		            if (args.length > 2)
   		            {
   			            obj["data"]=args[2].toString();
   		            }

	            }
	            responses.addItem(obj);
            }
            private function buildNodeList(args:Array):void 
	    {
     	      //ignore acks
     	      var node_count:int=args[2].node_count;
     	      var node_start:int=args[2].start_node;
     	      var nodeNames:ArrayCollection=new ArrayCollection(args[2].node_list);
	      trace("Node Names len:"+nodeNames.length);
	      trace("Node Count:"+node_count);
     	      if (node_count > 0)
     	      {
     	      	for(var i:int=1;i<nodeNames.length;i++)
     	      	{
	        trace("Aa");
	          trace("Node Name len:"+nodeNames[i].length.toString());
		  if (nodeNames[i].length > 0)
		  {
	        trace("b");
		    portList.addItem({label:nodeNames[i],data:portList.length+1})
		    trace(nodeNames[i]);
		  }
	        trace("c");
     		}
	        trace("Completed list");
     		avantron.listNodes(node_count+node_start);
     	      }
     	      else
     	      {
     		ports.enabled=true;
     		trace_cycle_cmb.enabled=true;
     		ports.selectedIndex=0;
	        Alert.show("Got avail  Port List:"+portList.length + ", label at 0" + portList[0].label);
		//ports.dataProvider=portList;
     	      }
            }     
            private function menuHandler(event:MenuEvent):void  {
                trace("help");
                if (event.item.@data == "Connect")
                {
                  event.item.@enabled="false";
		  avantron=new Protocol(process_response,host,parseInt(port));
                  avantron.start();
                  avantron.logon();
                  avantron.getSettings();
                  connectMenu();
                  
                }
                if (event.item.@data == "Disconnect")
                {
                  avantron.logoff();
                  avantron.close();
                  disconnectMenu();
                }
                if (event.item.@data == "SA")
                {
		  avantron.newMode(0)
                }
                if (event.item.@data == "Analog")
                {
		  avantron.newMode(6)
                }
                if (event.item.@data == "DCP")
                {
		  avantron.newMode(3)
                }
                if (event.item.@data == "QAM")
                {
		  avantron.newMode(15)
                }
                if (event.item.@data == "Disconnect")
                {
                  avantron.logoff();
                  avantron.close();
                  disconnectMenu();
                }
                if (event.item.@data == "Disconnect")
                {
                  avantron.logoff();
                  avantron.close();
                  disconnectMenu();
                }
                if (event.item.@data == "Disconnect")
                {
                  avantron.logoff();
                  avantron.close();
                  disconnectMenu();
                }
            }
            private function connectMenu():void {
               menuBarXML.menuitem.(@id=="disconn").@enabled="true";
               menuBarXML.menuitem.(@id=="conn").@enabled="false";
               menuBarXML.menuitem.(@id=="samode").@enabled="true";
               menuBarXML.menuitem.(@id=="analogmode").@enabled="true";
               menuBarXML.menuitem.(@id=="dcpmode").@enabled="true";
               menuBarXML.menuitem.(@id=="qammode").@enabled="true";
               Alert.show("Should be updated:"+menuBarXML.menuitem.(@id=="modeMenu").@enabled.toString());
	       menuBarXML.menuitem.(@id=="updateSettings").@enabled="true";
	       menuBarXML.menuitem.(@id=="changeSettings").@enabled="true";
            }
	    private function setModeMenu(mode:String):void {
               menuBarXML.menuitem.(@id=="samode").@toggled="false";
               menuBarXML.menuitem.(@id=="analogmode").@toggled="false";
               menuBarXML.menuitem.(@id=="dcpmode").@toggled="false";
               menuBarXML.menuitem.(@id=="qammode").@toggled="false";
               menuBarXML.menuitem.(@id=="samode").@enabled="true";
               menuBarXML.menuitem.(@id=="analogmode").@enabled="true";
               menuBarXML.menuitem.(@id=="dcpmode").@enabled="true";
               menuBarXML.menuitem.(@id=="qammode").@enabled="true";
	       if (mode == "SA")
	       {
                 menuBarXML.menuitem.(@id=="samode").@toggled="true";
                 menuBarXML.menuitem.(@id=="samode").@enabled="false";
	         view.selectedChild=saview;
		 Alert.show("Setting Mode");
	       }
	       else if (mode == "SM6")
	       {
                 menuBarXML.menuitem.(@id=="analogmode").@toggled="true";
                 menuBarXML.menuitem.(@id=="analogmode").@enabled="false";
		 view.selectedChild=analogview;
	       }
	       else if (mode == "DCP")
	       {
                 menuBarXML.menuitem.(@id=="dcpmode").@toggled="true";
                 menuBarXML.menuitem.(@id=="dcpmode").@enabled="false";
		 view.selectedChild=dcpview;
	       }
	       else if (mode == "QAM")
	       {
                 menuBarXML.menuitem.(@id=="qammode").@toggled="true";
                 menuBarXML.menuitem.(@id=="qammode").@enabled="false";
		 view.selectedChild=qamview;
	       }
	      
	    }

            private function disconnectMenu():void {
               menuBarXML.menuitem.(@id=="disconn").@enabled="false";
               menuBarXML.menuitem.(@id=="conn").@enabled="true";
               menuBarXML.menuitem.(@id=="modeMenu").@enabled="false";
               menuBarXML.menuitem.(@id=="samode").@enabled="false";
               menuBarXML.menuitem.(@id=="analogmode").@enabled="false";
               menuBarXML.menuitem.(@id=="dcpmode").@enabled="false";
               menuBarXML.menuitem.(@id=="qammode").@enabled="false";
	       menuBarXML.menuitem.(@id=="changeSettings").@enabled="false";
            }

public function init_app():void
{
   responses.addItem({event:"initialization",response_type:"",data:"Running init_app"});
   trace("Going, going gone");
   //avantron.start();
}
public function port_selected(port:Object):void
{
   Alert.show("PORT:"+port.data.toString());
   avantron.selectRPTP(port.data);
}
public function cycle_selected(cycle:Object):void
{
   avantron.set_trace_cycle(cycle.data);
}
        ]]>
    </mx:Script>
        <mx:VBox height="100%" width="100%" backgroundColor="0xffffff">
	  <mx:MenuBar labelField="@label" dataProvider="{menuBarXML}" itemClick="menuHandler(event);"/>
	  <mx:HDividedBox height="100%" width="100%">
	    <mx:Panel height="100%" minWidth="200" title="Configuration">
	      <mx:Label text="Select Port"/>
	      <mx:ComboBox id="ports" enabled="false" change="port_selected(ComboBox(event.target).selectedItem);" dataProvider="{portList}"/>
	      <mx:Label text="Select Update Rate"/>
	      <mx:ComboBox id="trace_cycle_cmb" enabled="false" change="cycle_selected(ComboBox(event.target).selectedItem);" >
	        <mx:ArrayCollection id="stateArray">
	           <mx:Object label="10%" data="10"/>
	           <mx:Object label="20%" data="5"/>
	           <mx:Object label="Quarter" data="4"/>
	           <mx:Object label="One Third Speed" data="3"/>
	           <mx:Object label="Half Speed" data="2"/>
	           <mx:Object label="Full Speed" data="1"/>
	        </mx:ArrayCollection>
	      </mx:ComboBox>
	      <mx:Label text="Settings"/>
	      <mx:DataGrid id="settingsGrid" rowCount="15" minWidth="180" >
	       <mx:columns>
	        <mx:DataGridColumn dataField="name" headerText="Name"/>
	        <mx:DataGridColumn dataField="value" headerText="Value"/>
	       </mx:columns>
	      </mx:DataGrid>
	      
	    </mx:Panel>
	    <mx:ViewStack id="view" height="100%" width="90%">
	     <mx:Panel title="Spectrum Analyzer" id="saview" height="100%" width="100%">
	      <mx:VDividedBox  height="100%"  width="100%">
	       <mx:Canvas id="traceCanvas" backgroundColor="#EEEEEE" height="50%" width="100%" verticalScrollPolicy="off">
	          <mx:Image id="traceImage" x="0" y="0" height="100%" width="100%" scaleContent="true" />
	       </mx:Canvas>
	       <mx:Canvas id="waterfallCanvas" backgroundColor="#EEEEEE" height="50%" width="100%" verticalScrollPolicy="off">
	          <mx:Image id="waterfallImage" x="0" y="0" height="100%" width="100%" scaleContent="true" />
	       </mx:Canvas>
	      </mx:VDividedBox>
	     </mx:Panel>
	     <mx:Panel title="Analog" height="100%" id="analogview" width="100%"/>
	     <mx:Panel title="DCP" height="100%" id="dcpview" width="100%"/>
	     <mx:Panel title="QAM" height="100%" id="qamview" width="100%"/>
	    </mx:ViewStack>
	  </mx:HDividedBox>
	</mx:VBox>
</mx:Application>
